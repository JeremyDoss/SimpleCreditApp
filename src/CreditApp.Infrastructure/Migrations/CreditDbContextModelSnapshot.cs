// <auto-generated />
using CreditApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CreditApp.Infrastructure.Migrations
{
    [DbContext(typeof(CreditDbContext))]
    partial class CreditDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("CreditApp.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CreditApp.Entities.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("Created");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("CreditApp.Entities.Ledger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int>("JournalId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.ToTable("Ledgers");
                });

            modelBuilder.Entity("CreditApp.Entities.LedgerRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("LedgerId");

                    b.Property<int>("TransactionId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("TransactionId");

                    b.ToTable("LedgerRecords");
                });

            modelBuilder.Entity("CreditApp.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("JournalId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CreditApp.Entities.Journal", b =>
                {
                    b.HasOne("CreditApp.Entities.Account", "Account")
                        .WithMany("Journals")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CreditApp.Entities.Ledger", b =>
                {
                    b.HasOne("CreditApp.Entities.Journal", "Journal")
                        .WithMany("Ledgers")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CreditApp.Entities.LedgerRecord", b =>
                {
                    b.HasOne("CreditApp.Entities.Ledger", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CreditApp.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CreditApp.Entities.Transaction", b =>
                {
                    b.HasOne("CreditApp.Entities.Journal", "Journal")
                        .WithMany("Transactions")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
